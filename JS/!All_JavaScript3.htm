<script>
//-------------------------------------------------------------------------------------24.09.15
function count() {
	var counter = 0;
	return function() {
		return counter++;
	}
}
counter = count();
counter();

//--------------------------------
var myCoolWorld = (function() {
	var name, _getter, _setter;
	
	name = 'Wintermute';
	
	_getter = function() {
		console.log(name);
	};
	
	_setter = function(value) {
		name = value;
	};
		
	return {
		getter: _getter,
		setter: _setter
	};
	
}());

Object.freeze(myCoolWorld);

//-------------------------------------------------------------------------------------25.09.15
var a; //undefined
b = a + 5 //NaN
typeof b //number

function f(n) {
	var n = n 
			? n*f(n-1) 
			: 1;
	return n
}
//-------------------------------------------------------------------------------------28.09.15
function f() {
   function f() { return 1 }
   return f();
   function f() { return 2 }
}
f(); //2

//Copy array
a = [1,2,3];
b = [].concat(a);
b.pop(); 

//push [].<-  
//pop  [].->

//unshift  ->.[]  
//shift <-.[] 

//-------------------------------------------------------------------------------------12.11.15
var copy = JSON.parse(JSON.stringify(original));

//-------------------------------------------------------------------------------------19.11.15
obj = angular.copy(obj);

//-------------------------------------------------------------------------------------24.12.15
var arrExclude = ["ipAddress", "description", "statusDescription"];
var arr = ["item1", "ipAddress", "item2", "description", "statusDescription", "item3"];
var idx = arr.indexOf(arrExclude[1]); 
var results = [];

for (var i = 0; i < arr.length; i++) {
    idx = arrExclude.indexOf(arr[i]);
	if (idx == -1) {
		results.push(arr[i])
	}
} 
// results ["item1", "item2", "item3"]

//-------------------------------------------------------------------------------------05.04.16
a = {};
b = a;
a.name = 'ed';
b.name //'ed'
a = null

//-------------------------------------------------------------------------------------08.07.16
Object.defineProperty();
Object.observe();
Object.freeze();
Object.getOwnPropertyDescriptor(o, 'a');

var o = {};   
Object.defineProperty(o, 'a', {
  value: 37,
  writable: true,
  enumerable: true,
  configurable: true
});

var user = {
  firstName: "Вася",
  surname: "Петров",

  get fullName() {
    return this.firstName + ' ' + this.surname;
  },

  set fullName(value) {
    var split = value.split(' ');
    this.firstName = split[0];
    this.surname = split[1];
  }
};

//--------------------------------
"use strict";
1.Во-первых, строгий режим делает невозможным случайное создание глобальных переменных.
mistypedVaraible = 17; // throws a ReferenceError

2.Во-вторых, строгий режим заставляет присваивания, 
которые всё равно завершились бы неудачей, 
выбрасывать исключения. 
Любое присваивание, которое в обычном режиме завершается неудачей (
присваивание значения свойству, защищённому от записи; 
присваивание значения свойству, доступному только на чтение; 
присваивание нового свойства нерасширяемому объекту), в строгом режиме выбросит исключение:

// Assignment to a non-writable property
var obj1 = {};
Object.defineProperty(obj1, "x", { value: 42, writable: false });
obj1.x = 9; // throws a TypeError

// Assignment to a getter-only property
var obj2 = { get x() { return 17; } };
obj2.x = 5; // throws a TypeError

// Assignment to a new property on a non-extensible object
var fixed = {};
Object.preventExtensions(fixed);
fixed.newProp = "ohai"; // throws a TypeError

3.В-третьих, в строгом режиме попытки удалить неудаляемые свойства 
будут вызывать исключения 
(в то время как прежде такая попытка просто не имела бы эффекта):

delete Object.prototype; // throws a TypeError

4. В-четвёртых, строгий режим требует, чтобы все свойства, 
перечисленные в сериализованном объекте, встречались только один раз.
var o = { p: 1, p: 2 }; // !!! syntax error

5. В-пятых, строгий режим требует, чтобы имена аргументов 
в объявлении функций встречались только один раз
function sum(a, a, c) // !!! syntax error
{
  "use strict";
  return a + b + c; // wrong if this code ran
}

6.В-шестых, строгий режим запрещает синтаксис восьмеричной системы счисления. 
var sum = 015 + // !!! syntax error

//-------------------------------------------------------------------------------------11.07.16
//Closure
for (var i = 1; i <= 3; i++) {
  document.getElementById('button-' + i).onclick = 
	function(x) {
		return function() {
			alert("This is button: " + x);
		}
	}(i);
}

//-------------------------------------------------------------------------------------14.07.16
var User = function(name) {
	this.name = name;
	this.showName = function() {
		return this.name;
	};
};

user1 = new User('ed'); //User {name: "ed"}
user1.showName(); //"ed"

var Dev = function(name, skills) {
	this.name = name;
	this.skills = skills;
	this.showSkills = function() {
		return this.skills;
	};
};

Dev.prototype = new User();
Dev.prototype.constructor = Dev;

//-------------------------------------------------------------------------------------15.07.16
a1 = {id: 1, name: 'ed'};

Object.keys(a1); //["id", "name"]
Object.keys(a1)[0]; //"id"
Object.keys(a1)[1]; //"name"

delete a1[Object.keys(a1)[0]]

//-------------------------------------------------------------------------------------17.07.16
b = document.getElementsByTagName('body');
b[0].innerHTML = '';
b[0].innerHTML = '<div id="tree"></div>';
var tree = document.getElementById('tree');

var a = {
	id:1,
	name: 'Level 1',
	node2: {
		id:2,
		name: 'Level 2'
	},	
	test:'test',
	node1: {
	id:2,
	name: 'Level 2',
	node: {
		id:3,
		test:'test',
		name: 'Level 3',
		gate: {id:777, text:'CoolWorld', name: 'Level 4'}
		}
	},
	node3: {
		id:2,
		name: 'Level 2'
	},		
	last: 'last'
};
 
tree.innerHTML = '';
var s = '';

function func(obj) {
    for (var key in obj) {
		s +='<ul>';
        if (typeof(obj[key]) === 'object') {
			s +='<ul>';
			s +='<li>' + key + '</li>';
				func(obj[key]);
			s +='</ul>';         
        } else {
			s +='<li>' + key + ': ' + obj[key] + '</li>';
        }
		s +='</ul>';	
	}
}

func(a);
tree.innerHTML += s;

//-------------------------------------------------------------------------------------19.07.16
function f() {
	var a = b = c = 5;
}
f(); //b, c - Global;

//------------------------------------
function f(a) {
   return function(b) {
      return a + b;
}
f(1)(2); //3

//------------------------------------
a = {v: 5};
a.valueOf = function() { return this.v};
a + 1 // 6

//-------------------------------------------------------------------------------------23.09.16
id = + new Date;

//-------------------------------------------------------------------------------------09.02.17
a = [];
typeof a; //"object"
Object.prototype.toString.call(a).split('object ')[1].split(']')[0]; //"Array"

//------------------------------------
function closure() {
var obj = {};
	for (var i = 1; i < 10; i++) {
	obj['x' + i] = function(x) {
			return function() {
				console.log("This is button: " + x);
			}
		}(i)
	   console.log(i)
	}
	return obj;
}
var test = closure();
test.x2();
test.x5();

//------------------------------------
document.querySelector('div');
document.querySelectorAll('div.text');

//------------------------------------
var foo = function bar () {};
bar(); //ReferenceError: bar is not defined

var f = function() {}
typeof f //"function"

//------------------------------------
cache:false //ionic .state

//-------------------------------------------------------------------------------------02.03.17
function makeArmy() {
  let shooters = [];
  for (let i = 0; i < 10; i++) {
    shooters.push(function() {
      console.log(i); // выводит свой номер
    });
  }
  return shooters;
}

var army = makeArmy();

army[0](); // 0
army[5](); // 5

//------------------------------------
function letClosure() {
var obj = {};
	for (let i = 1; i < 10; i++) {
	obj['x' + i] = function() {
			console.log("This is button: " + i); 
		}
	   console.log(i)
	}
	return obj;
}
var test = letClosure();
test.x2();
test.x5();

//-------------------------------------------------------------------------------------07.03.17
let user = { name: "Вася", isAdmin: false };
// clone = пустой объект + все свойства user
let clone = Object.assign({}, user);

//------------------------------------
//Spread Operator
a =[1,2];
b = [3,4];
a.push(...b); //[1, 2, 3, 4]

//-------------------------------------------------------------------------------------13.03.17
function isNumber(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

//------------------------------------
function dateCheck(dateFrom, dateTo, dateCheck) {
	var from = Date.parse(dateFrom);
	var to   = Date.parse(dateTo);
	var check = Date.parse(dateCheck );
	if((check <= to && check >= from)) {
		return true;
	}
}

//-------------------------------------------------------------------------------------22.03.17
/*
<script src="1.js" async></script>
<script src="2.js" async></script>

<script src="1.js" defer></script>
<script src="2.js" defer></script>
*/

А в таком коде (с defer) первым сработает 
всегда 1.js, а скрипт 2.js, 
даже если загрузился раньше, будет его ждать.

Второе отличие – скрипт с defer сработает,
когда весь HTML-документ будет обработан браузером.

При одновременном указании async и defer в современных 
браузерах будет использован только async.

//------------------------------------
Object.prototype.toString.call(function(){}) // "[object Function]"

typeof function(){} // "function"

+ undefined // NaN
+ null // 0

!! 1 // true
!! 0 //false

//-------------------------------------------------------------------------------------10.04.17
var user = {
  name: "Петя",
  age: 30
}

var keys = Object.keys(user);
alert( keys ); // name, age

//------------------------------------
«Понимать замыкания» в JavaScript означает понимать следующие вещи:

1. Все переменные и параметры функций являются свойствами объекта переменных LexicalEnvironment. 
Каждый запуск функции создает новый такой объект. На верхнем уровне им является «глобальный объект», в браузере – window.

2. При создании функция получает системное свойство [[Scope]], которое ссылается на LexicalEnvironment, 
в котором она была создана.

3. При вызове функции, куда бы её ни передали в коде – она будет искать переменные сначала у себя, 
а затем во внешних LexicalEnvironment с места своего «рождения».

//------------------------------------
// new Function
Функции, создаваемые через new Function, имеют значением [[Scope]] не внешний объект переменных, а window.
Следствие – такие функции не могут использовать замыкание.

var a = 1;
function getFunc() {
  var a = 2;
  var func = new Function('', 'alert(a)');
  return func;
}
getFunc()(); // 1, из window

//------------------------------------
function sum(a) {
  return function(b) {
    return a + b; // возьмет a из внешнего LexicalEnvironment
  };
}
sum(1)(2) // 3

//-------------------------------------------------------------------------------------21.06.17
Концептуально, интерфейс выражает собой свойство, которым обладают объекты. 
В интерфейсе допустимы только открытые члены, не являющиеся полями. 
Обычно интерфейсы не содержат реализации (исключение — java 8) и именуются прилагательными. 
Производные классы не наследуются от интерфейсов (поскольку наследовать нечего), 
а реализуют их, при этом разрешена множественная реализация интерфейсов.

Абстрактный класс — это прежде всего базовая реализация какой-то функциональности, 
в абстрактном классе могут быть закрытые и защищенные члены, разрешены поля. 
Обычно абстрактные классы именуются существительными. 
Производные классы не могут быть унаследованы от нескольких базовых классов 
(исключение — C++, но даже тут множественное наследование считается неправильной практикой).

Интерфейс — протокол коммуникации.
Абстрактный класс — класс, предназначенный для наследования, но не инстанцирования.


//-------------------------------------------------------------------------------------02.08.17

for (let i = 0; i < 10; i++) {
	setTimeout(() => {
		console.log(i); // выводит свой номер
	}, 100);
}

//---------------------------------
Promise - pending -> fulfilled or rejected.

//---------------------------------
NEW Type - Symbol !!!

//---------------------------------
var foo = 5;
var qux = {x: 10};

function bar(foo) {foo = 10}
function baz(qux) {qux.x = 5}

bar(foo) //5
baz(qux) //5

//-------------------------------------------------------------------------------------08.08.17
for (var i = 1; i <= 100; i++) {
    var results = '';
    if (i % 3 === 0) results += 'Fizz';
    if (i % 5 === 0) results += 'Buzz';
    console.log(results || i);
}

//-------------------------------------------------------------------------------------26.09.17
function bind(func, context) {
  return function() {
    return func.apply(context, arguments);
  };
}

//-------------------------------------------------------------------------------------15.03.18
flexbox --> flexWrap: 'wrap'


//-------------------------------------------------------------------------------------16.03.18

a() // ??? 
b() // ??? 

var a = function c(){return 1}
function b() {return 2}

console.log(c) // ??? 
-------------------------
[1,2,3,4,5].duplicator() // => [1,2,3,4,5,1,2,3,4,5]
Array.prototype.dublicator = function () {
	return this.concat(this)
}


-------------------------
closure
---------------------
function gеtObj(){
    var a = 0;
    return {
        getA: function() {
            return a += 1;
        }
    }
}
var obj1 = getObj();
var obj2 = getObj();
obj1.getA() /// ??? 
obj1.getA() /// ??? 
obj2.getA() /// ??? 

--------------------------------------

var a = {
       b: 5,
       getB: () =>  {
           return this.b;
       }
   };
console.log(a.getB()) // ?? 
var fn = a.getB;
console.log(fn()) // ?? 

---------------------------------------------
setTimeout(function(){
    console.log('a');
}, 100);
.......
10000 ms
countFibio();



function doSomеthing() {
    return Promise.resolve('1');
}

function doSomеthingElse(result2) {
    return Promise.resolve('2');
}

function finalHandlеr(result3) {
    console.log(result3)
}

1)
doSomething().then(function () {
    return doSomethingElse();
}).then(finalHandler);

  
  -----------------------------------
2)
doSomething().then(function () {
    doSomethingElse();
}).then(finalHandler);

 --------------------------------------
3)
doSomething().then(doSomethingElse())
.then(finalHandler);
  
  -------------------------------
4)
doSomething().then(doSomethingElse)
.then(finalHandler);



-----------------------------------------------
var a = {aa: 5};
var b = Object.create(a);
delete b.aa;  
console.log(b.aa); // ??
console.log(b.aa); // ??
-----------------------------------------

// Что будет в консоли?
var i = 10;
var array = [];

function foo(i) {
    array.push(function() {
        return i + i;
    });
}

while (i--) {
    foo(i);
}
console.log([
    array[0](),
    array[1](),
])





--------------------------------------------


for (let i = 0; i < 10; i++){
 setTimeout(function(){
   console.log(i);
 }, 1000);
}
//-------------------------------------------------------------------------------------------------------------------------------------------------
</script>































