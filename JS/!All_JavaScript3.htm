<script>
//-------------------------------------------------------------------------------------24.09.15
function count() {
	var counter = 0;
	return function() {
		return counter++;
	}
}
counter = count();
counter();

//--------------------------------
var myCoolWorld = (function() {
	var name, _getter, _setter;
	
	name = 'Wintermute';
	
	_getter = function() {
		console.log(name);
	};
	
	_setter = function(value) {
		name = value;
	};
		
	return {
		getter: _getter,
		setter: _setter
	};
	
}());

Object.freeze(myCoolWorld);

//-------------------------------------------------------------------------------------25.09.15
var a; //undefined
b = a + 5 //NaN
typeof b //number

function f(n) {
	var n = n 
			? n*f(n-1) 
			: 1;
	return n
}
//-------------------------------------------------------------------------------------28.09.15
function f() {
   function f() { return 1 }
   return f();
   function f() { return 2 }
}
f(); //2

//Copy array
a = [1,2,3];
b = [].concat(a);
b.pop(); 

//push [].<-  
//pop  [].->

//unshift  ->.[]  
//shift <-.[] 

//-------------------------------------------------------------------------------------12.11.15
var copy = JSON.parse(JSON.stringify(original));

//-------------------------------------------------------------------------------------19.11.15
obj = angular.copy(obj);

//-------------------------------------------------------------------------------------24.12.15
var arrExclude = ["ipAddress", "description", "statusDescription"];
var arr = ["item1", "ipAddress", "item2", "description", "statusDescription", "item3"];
var idx = arr.indexOf(arrExclude[1]); 
var results = [];

for (var i = 0; i < arr.length; i++) {
    idx = arrExclude.indexOf(arr[i]);
	if (idx == -1) {
		results.push(arr[i])
	}
} 
// results ["item1", "item2", "item3"]

//-------------------------------------------------------------------------------------05.04.16
a = {};
b = a;
a.name = 'ed';
b.name //'ed'
a = null

//-------------------------------------------------------------------------------------08.07.16
Object.defineProperty();
Object.observe();
Object.freeze();
Object.getOwnPropertyDescriptor(o, 'a');

var o = {};   
Object.defineProperty(o, 'a', {
  value: 37,
  writable: true,
  enumerable: true,
  configurable: true
});

var user = {
  firstName: "Вася",
  surname: "Петров",

  get fullName() {
    return this.firstName + ' ' + this.surname;
  },

  set fullName(value) {
    var split = value.split(' ');
    this.firstName = split[0];
    this.surname = split[1];
  }
};

//--------------------------------
"use strict";
1.Во-первых, строгий режим делает невозможным случайное создание глобальных переменных.
mistypedVaraible = 17; // throws a ReferenceError

2.Во-вторых, строгий режим заставляет присваивания, 
которые всё равно завершились бы неудачей, 
выбрасывать исключения. 
Любое присваивание, которое в обычном режиме завершается неудачей (
присваивание значения свойству, защищённому от записи; 
присваивание значения свойству, доступному только на чтение; 
присваивание нового свойства нерасширяемому объекту), в строгом режиме выбросит исключение:

// Assignment to a non-writable property
var obj1 = {};
Object.defineProperty(obj1, "x", { value: 42, writable: false });
obj1.x = 9; // throws a TypeError

// Assignment to a getter-only property
var obj2 = { get x() { return 17; } };
obj2.x = 5; // throws a TypeError

// Assignment to a new property on a non-extensible object
var fixed = {};
Object.preventExtensions(fixed);
fixed.newProp = "ohai"; // throws a TypeError

3.В-третьих, в строгом режиме попытки удалить неудаляемые свойства 
будут вызывать исключения 
(в то время как прежде такая попытка просто не имела бы эффекта):

delete Object.prototype; // throws a TypeError

4. В-четвёртых, строгий режим требует, чтобы все свойства, 
перечисленные в сериализованном объекте, встречались только один раз.
var o = { p: 1, p: 2 }; // !!! syntax error

5. В-пятых, строгий режим требует, чтобы имена аргументов 
в объявлении функций встречались только один раз
function sum(a, a, c) // !!! syntax error
{
  "use strict";
  return a + b + c; // wrong if this code ran
}

6.В-шестых, строгий режим запрещает синтаксис восьмеричной системы счисления. 
var sum = 015 + // !!! syntax error

//-------------------------------------------------------------------------------------11.07.16
//Closure
for (var i = 1; i <= 3; i++) {
  document.getElementById('button-' + i).onclick = 
	function(x) {
		return function() {
			alert("This is button: " + x);
		}
	}(i);
}

//-------------------------------------------------------------------------------------14.07.16
var User = function(name) {
	this.name = name;
	this.showName = function() {
		return this.name;
	};
};

user1 = new User('ed'); //User {name: "ed"}
user1.showName(); //"ed"

var Dev = function(name, skills) {
	this.name = name;
	this.skills = skills;
	this.showSkills = function() {
		return this.skills;
	};
};

Dev.prototype = new User();
Dev.prototype.constructor = Dev;

//-------------------------------------------------------------------------------------15.07.16
a1 = {id: 1, name: 'ed'};

Object.keys(a1); //["id", "name"]
Object.keys(a1)[0]; //"id"
Object.keys(a1)[1]; //"name"

delete a1[Object.keys(a1)[0]]

//-------------------------------------------------------------------------------------17.07.16
b = document.getElementsByTagName('body');
b[0].innerHTML = '';
b[0].innerHTML = '<div id="tree"></div>';
var tree = document.getElementById('tree');

var a = {
	id:1,
	name: 'Level 1',
	node2: {
		id:2,
		name: 'Level 2'
	},	
	test:'test',
	node1: {
	id:2,
	name: 'Level 2',
	node: {
		id:3,
		test:'test',
		name: 'Level 3',
		gate: {id:777, text:'CoolWorld', name: 'Level 4'}
		}
	},
	node3: {
		id:2,
		name: 'Level 2'
	},		
	last: 'last'
};
 
tree.innerHTML = '';
var s = '';

function func(obj) {
    for (var key in obj) {
		s +='<ul>';
        if (typeof(obj[key]) === 'object') {
			s +='<ul>';
			s +='<li>' + key + '</li>';
				func(obj[key]);
			s +='</ul>';         
        } else {
			s +='<li>' + key + ': ' + obj[key] + '</li>';
        }
		s +='</ul>';	
	}
}

func(a);
tree.innerHTML += s;

//-------------------------------------------------------------------------------------19.07.16
function f() {
	var a = b = c = 5;
}
f(); //b, c - Global;

//------------------------------------
function f(a) {
   return function(b) {
      return a + b;
}
f(1)(2); //3

//------------------------------------
a = {v: 5};
a.valueOf = function() { return this.v};
a + 1 // 6

//-------------------------------------------------------------------------------------23.09.16
id = + new Date;

//-------------------------------------------------------------------------------------09.02.17
a = [];
typeof a; //"object"
Object.prototype.toString.call(a).split('object ')[1].split(']')[0]; //"Array"

function closure() {
	var obj = {};
	for (var i = 1; i <= 3; i++) {
	obj['x'+i] = function(x) {
			return function() {
				alert("This is button: " + x);
			}
		}(i)
	   console.log(i)
	}
	return obj;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------
</script>































