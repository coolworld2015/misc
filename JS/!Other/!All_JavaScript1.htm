<center>
<div id="test1"></div>
<script>
//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function i_27_06_14() {
var x;
y=null;
alert (x+' - '+y);   //undefined  and null
}

//i_27_06_14()

//---------------------------------------------------------------------------------------------------------

function User(name) {
this.name = name,

this.sayHi = function() {
alert('Привет я, ' + this.name+' !!!');
};

}

//var user1 = new User("Ира");
//user1.sayHi();
//var user2 = new User("Ed");
//user2.sayHi();
//---------------------------------------------------------------------------------------------------------

/* 
вы можете считать undefined неожиданным отсутствием значения, а null — умышленным отсутствием значения.
Упрощённо: JavaScript использует undefined, а программисты должны использовать null.
При преобразовании в число null становится 0, а undefined становится NaN.

У себя в голове я держу следующее:
undefined — значение переменной, которая не была инициализирована. Единственное значение типа Undefined.
null — умышленно созданный «пустой» объект. Единственное значение типа Null.
NaN — специальное значение типа Number, для выражения «не чисел», «неопределенности». ("нечисло" * 2)

Типы:
Undefined
Null
Boolean
String - Если хотя бы один аргумент является строкой, то второй будет также преобразован к строке!
Number - Infinity и NaN 
и
Object

Есть 5 «примитивных» типов: number, string, boolean, null, undefined и 6-й тип — объекты object.

Сравнение === проверяет точное равенство, включая одинаковый тип


Методы и свойства
Все значения в JavaScript, за исключением null и undefined, содержат набор вспомогательных функций и значений, доступных «через точку».
Такие функции называют «методами», а значения — «свойствами».

"Привет, мир!".length             - свойство
"Привет, мир!".toUpperCase() - метод 
*/


//i_27_06_14();

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function i_01_07_14()
{
/* 
SELECT * FROM  Person
INNER JOIN   
City 
ON Person.CityId = City.Id
*/
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function i_08_07_14_1() {
var myArray = new Array(3); 
for (i=0; i < myArray.length; i++) {
alert(i+' - '+myArray[i]);
}
}

//i_08_07_14_1();
//---------------------------------------------------------------------------------------------------------------------------------------
/* 
В JavaScript понятие ассоциативного массива как такового отсутствует. 
Обычные массивы могут иметь только числовые индексы, потому для эмуляции ассоциативных массивов, 
ключами которых могут быть в том числе и строковые значения, используются объекты.

Конструкция вида myVar = { key1: value1, key2: value2, … } создает объект myVar с набором полей, 
каждое из которых имеет свой ключ и значение. В дальнейшем доступ к элементам этого объекта может 
выполняться как с использованием нотации объектов и полей (myVar.key1), так и в нотации массивов и ключей (myvar['key1']).
*/
//---------------------------------------------------------------------------------------------------------------------------------------
function i_08_07_14_2() {
myArray    = new Array();
myArray[0]='Edward';
myArray[5]=100;
myArray[10]=true;

for (var i in myArray) {
alert(i+' - '+myArray[i]);
}
}

//i_08_07_14_2()

//---------------------------------------------------------------------------------------------------------------------------------------
function i_08_07_14_3() {
var s="строка";
var newS="";

for (i=0; i <s.length; i++) {
if (i%2) {
newS += s.charAt(i).toUpperCase();}
else {
newS += s.charAt(i);}
}
s=newS;
alert(s);
}

//i_08_07_14_3();

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
var s="строка";

function i_09_07_14_1() {
var s="новая строка";
window.s=s;
}
//i_09_07_14_1();
//alert(s);

//---------------------------------------------------------------------------------------------------------------------------------------
function i_09_07_14_2() {
var n=5;
alert(n.toString(2));
}

//i_09_07_14_2();

//---------------------------------------------------------------------------------------------------------------------------------------
function i_09_07_14_3() {
var x = [10];
alert(x[0]);
}

//i_09_07_14_3();

//---------------------------------------------------------------------------------------------------------------------------------------
function i_09_07_14_4() {
var s="1 2 3 4 5 6 7 8 9";
myArray=s.split(' ');
var s1="";
alert(s);

for (i=0; i <myArray.length; i++) {
s1+=myArray[i];
//alert(i+' - '+myArray[i]);
}
alert(s1);
}

//i_09_07_14_4();

//---------------------------------------------------------------------------------------------------------------------------------------
function i_09_07_14_5() {
alert(parseInt("5",10));
alert(parseFloat("3.14"));
}

//i_09_07_14_5();

//---------------------------------------------------------------------------------------------------------------------------------------
function i_09_07_14_6() {
var str='this is a "string constant" ';
var regexp = /"string constant"/; 
alert(str.search(regexp));
alert(str.match(regexp));
}

//i_09_07_14_6();

//---------------------------------------------------------------------------------------------------------------------------------------
var h='0x123ABC00';

function isitHEX(entry) {
validChar='012345678ABCDEFabcdef.';
strlen=entry.length;

if(strlen<1) {
alert('Enter Something!');
return false;
}

entry=entry.toUpperCase();

for(idx=0;idx<strlen;idx++) {
if(validChar.indexOf(entry.charAt(idx))<0) {
alert("Entry must be hex!");return false;
}
}
alert('ok!');return true;
}

//isitHEX(h);

//---------------------------------------------------------------------------------------------------------------------------------------
function isValidHex(hex) { 
//var expr =/^[A-Fa-f0-9]+$/;

//var reg=/^([a-zA-Z0-9]){3,3}$/; 

var expr =/^(0x|0X)?[a-fA-F0-9]+$/;

if(expr.test(hex) !== false) {
alert('ok!');
return true;
} 
else {
alert("Entry must be hex!")
return false;
} 
} 

//isValidHex(h);

//---------------------------------------------------------------------------------------------------------------------------------------
/* 
flags
Способы поиска по шаблону:
g — глобальный поиск (обрабатываются все совпадения с шаблоном поиска);
i — не различать строчные и заглавные буквы;
m — многострочный поиск.

Пароль (Строчные и прописные латинские буквы, цифры):
^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?!.*\s).*$
Пароль (Строчные и прописные латинские буквы, цифры, спецсимволы. Минимум 8 символов):
(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$
*/

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 
Существует 3 способа создать функцию. 
Основное отличие в результате их работы - в том, 
что именованная функция видна везде, 
а анонимная - только после объявления:

//---------------------------------------------------------------------------------------------------------------------------------------
Именованные (FunctionDeclaration)	
function имя(параметры) {...}

Анонимные (FunctionExpression)
var имя = function(параметры) {…}
var имя = new Function(параметры, '...')
*/
//---------------------------------------------------------------------------------------------------------------------------------------
//var a = sum(2,2);
//function sum(x,y) {return x+y}
//var sum = function(x,y) {return x+y}
//alert(a);

//var cool = new Function('alert()');
//cool();
//---------------------------------------------------------------------------------------------------------------------------------------
/*
В JavaScript функция является значением, таким же как строка или число.
В javascript функции являются полноценными объектами встроенного класса Function. 
Именно поэтому их можно присваивать переменным, передавать и, конечно, у них есть свойства.
*/
//---------------------------------------------------------------------------------------------------------------------------------------
//function f1() {}
//f1.test=5;
//alert(f1.test);
//---------------------------------------------------------------------------------------------------------------------------------------
/*
Функции можно запускать с любым числом параметров.
Если функции передано меньше параметров, чем есть в определении,
то отсутствующие считаются undefined.
*/
//---------------------------------------------------------------------------------------------------------------------------------------
function sum_test() {
var sum=0;
for(var i=0;i<arguments.length;i++) {
//alert("arguments["+i+"] = "+arguments[i])
sum+=arguments[i];
}
console.log(arguments);
return sum;
}

//alert(sum_test(1,2,3,4,5,6));

//---------------------------------------------------------------------------------------------------------------------------------------
/*
Функцию легко можно передавать в качестве аргумента другой функции.
Например, map берет функцию func, 
применяет ее к каждому элементу массива arr 
и возвращает получившийся массив. 
«замыкание — это функция и все внешние переменные, которые ей доступны».
*/
//---------------------------------------------------------------------------------------------------------------------------------------
var map = function(func, arr) {
var result = [ ];
for(var i=0; i<arr.length; i++) {
result[i] = func(arr[i]);  
}
return result;
}

function dubl(x) {
return x*x;
}

//alert(map(dubl, [10, 20, 30]));

//---------------------------------------------------------------------------------------------------------------------------------------
function f1(p1, p2) {
p1(p2);
}

function f2 (p1) {
alert(p1/10); 
};

//f1(f2, 40 );

//---------------------------------------------------------------------------------------------------------------------------------------
function f(n) {
return n ? n*f(n-1) : 1
}

//alert( f(10) );

//---------------------------------------------------------------------------------------------------------------------------------------
/*
Объект в javascript представляет собой обычный ассоциативный массив или,
иначе говоря, "хэш". Он хранит любые соответствия "ключ => значение" и имеет несколько стандартных методов.
Метод объекта в javascript - это просто функция, которая добавлена в ассоциативный массив.
Все свойства объектов - public, т.е при определении свойства никак нельзя ограничить доступ к свойству.
В javascript есть специальные выверты для создания private свойств, связанные с замыканиями.
*/

var ob1 = new Object()
var ob2 = {}
var ob3 = Object.create({test:3});

ob1.test = 1;
ob2["test"] = 2;

//alert(ob3.test);

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ed={name:"Эд"};
ira={name:"Ира"};

say = function() {
alert("Привет, я "+this.name);
}

ed.sayHi=say;
ira.sayHi=say;

//ed.sayHi();
//ira.sayHi();
//ed['sayHi']();

//---------------------------------------------------------------------------------------------------------------------------------------
/*
Функцию можно вызвать, используя методы call и apply.

func.apply(obj, [параметры])
func.call(obj, параметр)
При таком вызове this будет установлен в obj.

Оба метода работают одинаково, но 
для call аргументы подставляются в вызов, а для apply - передается массив.
*/
//---------------------------------------------------------------------------------------------------------------------------------------

//ed.sayHi.call(ira);

function sum(a,b) {
this.c = a + b;
}

var test={};

//sum.call(test, 1,2);
//alert(test.c);

//sum.apply(test, [1,2]);
//alert(test.c);
//---------------------------------------------------------------------------------------------------------------------------------------

Array.prototype.myMetod = myMetod;

function myMetod() {
alert(this.length);
}

var array_test=["1", "2", "Three", "4","5"];

//array_test.myMetod();

//alert(array_test.indexOf("Three"));

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function i_15_07_14_1()
{
var array_test=["1", "2", "Three", "4","5"];
alert(array_test);

array_test.splice(2,0,"3"); // Add
alert(array_test);

array_test.splice(3,1); // Del
alert(array_test);

array_test.splice(2,1,"Three"); // Remove
alert(array_test);

array_test.splice(array_test.length,0,"6"); // New
alert(array_test);
}

//i_15_07_14_1();

//---------------------------------------------------------------------------------------------------------------------------------------
var person={
name:"ed",
_age: 20,
get age(){
return this._age;
},
set age(value){
this._age=value;
},
};

//console.log(Object.getOwnPropertyDescriptor(person,"age"));

function i_15_07_14_2() {
var s=Array();
for (property in person) {
s+=property+', ';
}
alert(s);
}

//i_15_07_14_2();

//alert(Object.keys(person));

//---------------------------------------------------------------------------------------------------------------------------------------
a={x:10};
b=a;
delete a;
//alert(b.x);   //10
//---------------------------------------------------------------------------------------------------------------------------------------

var Person = function(name) {
this.name = name;
}

var pers1=new Person("Ed");
//alert(pers1.name);

Person.prototype.sayHi = function() {
alert("Hello, my name is "+this.name);
}

var pers2=new Person("Ira");
//pers2.sayHi();

//alert(pers1.constructor);

var p=pers2 instanceof Person;
//alert(p);
//---------------------------------------------------------------------------------------------------------------------------------------

var Developer = function(name, skills) {
Person.apply(this, arguments);
this.skills=skills || [];
};

Developer.prototype = Object.create(Person.prototype);
Developer.prototype.constructor = Developer;
//Developer.prototype = new Person();

var dev1 = new Developer("Ed", ["js","sql","localStorage"]);
//alert(dev1.skills);

//dev1.sayHi();
//---------------------------------------------------------------------------------------------------------------------------------------
var array = ["one", "two", "three"];
array.forEach(function(element, index, array) {
array[index] = element.toUpperCase();
});

//alert(array);

//---------------------------------------------------------------------------------------------------------------------------------------
var start=(function() {
d = new Date();
s=d.toLocaleDateString()+' '+d.toLocaleTimeString();
var test1=document.getElementById("test1");
test1.innerHTML="<b>"+s;
} ( ));

(function timer() {
setTimeout(timer,1000);
d = new Date();
s=d.toLocaleDateString()+' '+d.toLocaleTimeString();
var test1=document.getElementById("test1");
test1.innerHTML="<b>"+s;
} )();

//---------------------------------------------------------------------------------------------------------------------------------------
function do_this() {
console.log(this);
alert(this);
} 

//do_this();
do_this.prototype="MyPrototype";
//alert(do_this.prototype);

//---------------------------------------------------------------------------------------------------------------------------------------
Array.prototype.mySort=function(){
alert("mySort");
}
//array_test.mySort();

//---------------------------------------------------------------------------------------------------------------------------------------
/*
function Animal (name)  { 
eats=true;
this.name = name,

this.sayHi =function() {
alert(this.name);
}
};

var animal1=new Animal("Ежик");
animal1.sayHi();
*/

//---------------------------------------------------------------------------------------------------------------------------------------
/*
var animal = { eats: true };
var rabbit = { jumps: true };


rabbit.__proto__ = animal;  // унаследовать
alert(rabbit.eats); // true
alert(rabbit.jumps); // true
*/

//---------------------------------------------------------------------------------------------------------------------------------------
var animal = { 
eats: true,
sayHi: function(name) {
this.name=name;
alert("Name is - "+this.name);
}
};


var rabbit = { 
jumps: true,
jump: function(name) {
alert("Jamps - "+this.jumps);
}
};

rabbit.__proto__ = animal; 
//rabbit.jump();

var hedgehog = Object.create(rabbit); 
// var hedgehog = { }; hedgehog.__proto__ = rabbit; 

hedgehog.sniff=true;
hedgehog.sniffs=function(){
alert("Sniffs - "+this.sniff);
}

//hedgehog.sniffs(); 

//hedgehog.sayHi("Еж");

//---------------------------------------------------------------------------------------------------------------------------------------
array_test=["one","two","three"];

//Array.prototype.toString=function() {
//alert();
//}

//array_test.mySort();
//alert(array_test);

//---------------------------------------------------------------------------------------------------------------------------------------28.07.14
//alert(null && '2'); //null
//alert('2'>1); //true
//alert('14'>'2'); //false

var s=['1','12','2','14'];
//console.log(s.sort());
//alert(s.sort());

//---------------------------------------------------------------------------------------------------------------------------------------
var a1={name:'a1'};
a1.sayHi=say;
//a1.sayHi();

var b1=new Object(name='b1');

var c1=Object.create({name:'c1'});

var A=function(name){
this.name=name;
this.say=function(){
alert('My name is '+this.name);
};
}

var a2=new A("a2");
//a2.say();
//a2.Sort(); //error

A.prototype.mySort = function(){
alert(this.name+" - mySort");
}

var a3=new A("a2");
//a3.mySort();

//---------------------------------------------------------------------------------------------------------------------------------------
function test1()
{
for (var i = 0; i < 10; i++) 
{ 
setTimeout(function () 
{ 
//alert(i);
console.log(i); 
}, 0); 
}
}

//test1();

//---------------------------------------------------------------------------------------------------------------------------------------
//1. Напишите функцию inArray проверяющую вхождение элемента в массив и возвращающую значение типа Boolean.
function inArray(arr,elem) 
{
var inA=false;
for (var i=0; i<arr.length; i++) 
{
if (elem==arr[i]) 
{ 
inA=true; 
} 
}
return inA;
}

array_test=[1,"two",false];

//alert(inArray(array_test,false));

//---------------------------------------------------------------------------------------------------------------------------------------29.07.14

//alert('12'/2+1); //7

/*
(function timer() {
    setTimeout(timer,1000);
    d = new Date();
    s=d.toLocaleDateString()+' '+d.toLocaleTimeString();
    console.log(s);
} )();
*/

//---------------------------------------------------------------------------------------------------------------------------------------04.08.14
function createCounter() {
   var numberOfCalls = 0;
   return function() {
++numberOfCalls;
      //console.log(numberOfCalls);
return console.log(numberOfCalls);
   }
}
var fn = createCounter();
//fn(); // 1
//fn(); // 2
//fn(); // 3

//---------------------------------------------------------------------------------------------------------------------------------------
function addHideHandler(sourceId, targetId) {
var sourceNode = document.getElementById(sourceId);
var handler = function() {
var targetNode = document.getElementById(targetId);
targetNode.style.display = 'none';
}
sourceNode.onclick = handler;
}

addHideHandler('test1','test2');

//---------------------------------------------------------------------------------------------------------------------------------------08.08.14
myArray = [
{'id':'73','foo':'bar1'},
{'id':'45','foo':'zzz45'},
{'id':'7','foo':'zzz41'},
{'id':'5','foo':'zzz5'},
{'id':'7','foo':'zzz7'}
]

//---------------------------------------------------------------------------
function objectFindByKey(array, key, value) {
    for (var i = 0; i < array.length; i++) {
        if (array[i][key] === value) {
            return array[i];
        }
    }
    return null;
}

var result_obj = objectFindByKey(myArray, 'id', '73');
//console.log(result_obj.foo);

//---------------------------------------------------------------------------
function findById(source, id) {
    return source.filter(function( obj ) {
        return +obj.id === +id;
    })[ 0 ];
}

var result = findById( myArray, 73 );
//console.log(result.foo);

//---------------------------------------------------------------------------
  function getById(id, myArray) {
    return myArray.filter(function(obj) {
      if(obj.id == id) {
        return obj 
      }
    })[0]
  }

get_my_obj = getById(7, myArray);
//console.log(get_my_obj);

//---------------------------------------------------------------------------------------------------------------------------------------10.08.14
var func = function(callback) {
var name="Ed";
callback(name);
};

func(function(n) {
//console.log("Hello "+n);
});

//---------------------------------------------------------------------------
var func1 = function() {
return function() {
console.log("Hi");
}
}

//func1()();

//---------------------------------------------------------------------------

var greeting = (function(name) {
return "Hello "+name;
}("Ed"));

//console.log(greeting);

//---------------------------------------------------------------------------------------------------------------------------------------17.08.14
var result = [["Яблоко",1], ["Апельсин",2],["Банан",3]];

function outputItem(item, i, arr) {
//console.log((i + ": " + item + " (массив:" + arr + ")"));
//console.log(row);
}

//---------------------------------------------------------------------------

result.forEach(function (row) {
//console.log(row[0]);
});

//for (i in result) {console.log(i)}

//---------------------------------------------------------------------------------------------------------------------------------------30.08.14
var getAnswer = (function() {
    var answer = 42;

    return function inner() {
        console.log(answer);
    };
} )()

//getAnswer();
//---------------------------------------------------------------------------

function Hello(name) {
var text = 'Hello '+ name;
var hi = function() {console.log(text);}
return hi;
}

var a1 = Hello('Ed');
//a1();

var a2 = Hello('Ira');
//a2();

//---------------------------------------------------------------------------------------------------------------------------------------02.09.14
var Pers = function(name, age) {
this.name = name,
this.age = age,
this.hi = function() {
console.log('Name is '+this.name)
}
}

Pers.prototype.old = function() {
console.log('Age is '+this.age)
}

var p1 = new Pers('P1', 22);
var p2 = new Pers('P2', 32);
var p3 = new Pers('P3', 42);

myArray = [];

myArray.push(p1);
myArray.push(p2);
myArray.push(p3);

myArray.forEach(function(a,b,c) {
console.log(a,b,c);
});

myArray.forEach(function(a) {
a.hi();
});

myObjArray = [];

myObjArray['p1'] = p1; 
myObjArray['p2'] = p2; 
myObjArray['p3'] = p3; 

console.log(myObjArray);

myObjArray['p1'].old();
myObjArray['p2'].old();
myObjArray['p3'].old();

for (i in myObjArray) {
//console.log(i);
}

myObjArray.forEach(function(a,b,c) {
console.log('a,b,c');
});

//---------------------------------------------------------------------------------------------------------------------------------------16.09.14
function sayHelloInFiveSeconds(name) {
    var prompt = "Hello, " + name + "!";
    // Inner functions are put in the local scope by default, as if they were
    // declared with 'var'.
    function inner() {
        alert(prompt);
    }
    setTimeout(inner, 2000);
    // setTimeout is asynchronous, so the sayHelloInFiveSeconds function will
    // exit immediately, and setTimeout will call inner afterwards. However,
    // because inner is "closed over" sayHelloInFiveSeconds, inner still has
    // access to the 'prompt' variable when it is finally called.
}

sayHelloInFiveSeconds("Ed"); 

//---------------------------------------------------------------------------------------------------------------------------------------04.12.14
var Person = function(name) {
this.name = name;
};

Person.prototype.hello = function() {
return this.name;
};

var Developer = function(name, skills) {
this.name = name;
this.skills=skills;
};

Developer.prototype =  new Person();
Developer.prototype.constructor = Developer;

var cool = {
a:1,
f1: function() {
console.log(cool.a);
}
}

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
</script>